<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acompanhamento de Produção - Corte</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        mono: ['"Roboto Mono"', 'monospace'],
                    },
                    colors: {
                        'atraso-red': '#D64E4E',
                        'emdia-green': '#4EC185',
                        'bg-blue': '#102B4D',
                        'text-light': '#F3F4F6',
                        'text-dark': '#1F2937',
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;500;700&display=swap');
    </style>
</head>
<body class="bg-bg-blue text-text-light font-mono flex flex-col items-center justify-between min-h-screen p-8">
    
    <!-- Main Content Container -->
    <main class="w-full h-full flex flex-col max-w-7xl">
        
        <!-- Header -->
        <header class="flex justify-between items-center w-full mb-8">
            <h1 class="text-3xl sm:text-4xl font-bold">Acompanhamento de Produção - Corte</h1>
            <div class="text-right">
                <p class="font-bold text-lg sm:text-xl">GRUPO</p>
                <p class="font-bold text-lg sm:text-xl -mt-1">MADRE</p>
                <p class="font-bold text-lg sm:text-xl -mt-1">SILVA</p>
            </div>
        </header>

        <!-- Status Blocks -->
        <section class="flex flex-col flex-grow w-full space-y-12">
            <!-- EM ATRASO Block -->
            <div class="relative flex-grow flex flex-col items-center">
                <div class="absolute -top-1 left-1/2 transform -translate-x-1/2 bg-atraso-red bg-opacity-70 text-white font-bold px-10 py-3 rounded-full shadow-lg">
                    EM ATRASO
                </div>
                <div class="flex-grow bg-atraso-red rounded-xl shadow-2xl p-6 flex flex-col justify-center items-center mt-6 w-full h-96">
                    <div class="absolute top-2 right-2 m-4 flex space-x-2">
                        <button id="exportDelayedBtn" class="bg-white/20 hover:bg-white/40 text-white px-3 py-1 rounded-full text-xs font-bold transition duration-300">
                            Exportar
                        </button>
                        <button id="listDelayedBtn" class="bg-white/20 hover:bg-white/40 text-white px-3 py-1 rounded-full text-xs font-bold transition duration-300">
                            Listar
                        </button>
                    </div>
                    <span id="total-delayed" class="text-7xl font-bold text-white leading-none">...</span>
                </div>
            </div>

            <!-- EM DIA Block -->
            <div class="relative flex flex-col items-center flex-grow-0 h-48">
                <div class="absolute -top-1 left-1/2 transform -translate-x-1/2 bg-emdia-green bg-opacity-70 text-white font-bold px-10 py-3 rounded-full shadow-lg">
                    EM DIA
                </div>
                <div class="flex-grow bg-emdia-green rounded-xl shadow-2xl p-6 flex flex-col justify-center items-center mt-6 w-full h-48">
                    <div class="absolute top-2 right-2 m-4 flex space-x-2">
                        <button id="exportOnTimeBtn" class="bg-white/20 hover:bg-white/40 text-white px-3 py-1 rounded-full text-xs font-bold transition duration-300">
                            Exportar
                        </button>
                        <button id="listOnTimeBtn" class="bg-white/20 hover:bg-white/40 text-white px-3 py-1 rounded-full text-xs font-bold transition duration-300">
                            Listar
                        </button>
                    </div>
                    <span id="total-ontime" class="text-7xl font-bold text-white leading-none">...</span>
                </div>
            </div>
        </section>

        <!-- Footer -->
        <footer class="flex justify-between items-center w-full mt-8 text-gray-400 text-sm">
            <p>Previsão:</p>
            <p>Atualizado em: <span id="update-timestamp">...</span></p>
            <!-- Botão para listar a tabela 'userid' -->
            <button id="listUseridBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-4 text-xs rounded-full shadow-lg transition duration-300">
                Listar UserID
            </button>
        </footer>
    </main>

    <!-- Modal for Listing Items -->
    <div id="listModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden items-center justify-center p-4 z-50">
        <div class="bg-bg-blue p-8 rounded-2xl shadow-2xl max-w-4xl w-full max-h-screen overflow-y-auto border border-gray-700">
            <div class="flex justify-between items-center border-b border-gray-700 pb-4 mb-6">
                <h4 id="modal-title" class="text-2xl font-bold text-text-light">Itens</h4>
                <button id="closeModal" class="text-gray-400 hover:text-gray-200 transition">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div class="overflow-x-auto rounded-lg">
                <table class="min-w-full bg-bg-blue">
                    <thead class="bg-gray-800">
                        <tr id="modal-table-header">
                            <!-- Cabeçalhos da tabela serão preenchidos aqui -->
                        </tr>
                    </thead>
                    <tbody id="modal-table-body" class="divide-y divide-gray-700">
                        <!-- Itens do modal serão preenchidos aqui -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const API_BASE_URL = 'http://127.0.0.1:5003/api';
            const totalDelayedSpan = document.getElementById('total-delayed');
            const totalOnTimeSpan = document.getElementById('total-ontime');
            const updateTimestampSpan = document.getElementById('update-timestamp');
            const exportDelayedBtn = document.getElementById('exportDelayedBtn');
            const listDelayedBtn = document.getElementById('listDelayedBtn');
            const exportOnTimeBtn = document.getElementById('exportOnTimeBtn');
            const listOnTimeBtn = document.getElementById('listOnTimeBtn');
            const listUseridBtn = document.getElementById('listUseridBtn');
            const listModal = document.getElementById('listModal');
            const closeModalBtn = document.getElementById('closeModal');
            const modalTableBody = document.getElementById('modal-table-body');
            const modalTableHeader = document.getElementById('modal-table-header');
            const modalTitle = document.getElementById('modal-title');
            
            let allData = [];

            const fetchData = async () => {
                try {
                    const response = await fetch(`${API_BASE_URL}/corte/data`);
                    if (!response.ok) {
                        throw new Error('Falha ao buscar dados');
                    }
                    allData = await response.json();
                    
                    renderSummary(allData);
                } catch (error) {
                    console.error("Erro ao buscar dados:", error);
                    totalDelayedSpan.textContent = 'ERRO';
                    totalOnTimeSpan.textContent = 'ERRO';
                }
            };

            const renderSummary = (data) => {
                const today = new Date();
                const delayedOrders = data.filter(item => new Date(item.orddtprev) < today);
                const onTimeOrders = data.filter(item => new Date(item.orddtprev) >= today);
                
                totalDelayedSpan.textContent = delayedOrders.length;
                totalOnTimeSpan.textContent = onTimeOrders.length;
                
                const now = new Date();
                const formattedDate = `${now.getDate().toString().padStart(2, '0')}/${(now.getMonth() + 1).toString().padStart(2, '0')}/${now.getFullYear()}`;
                const formattedTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
                updateTimestampSpan.textContent = `${formattedDate} ${formattedTime}`;
            };

            const populateModal = (data, title, columns) => {
                modalTableBody.innerHTML = '';
                modalTableHeader.innerHTML = '';
                // Se a coluna UIDUSUARIO existir, ordenar alfabeticamente por ela
                const hasUID = columns.some(c => c.toLowerCase() === 'uidusuario');
                if (hasUID) {
                    const uidKey = columns.find(c => c.toLowerCase() === 'uidusuario');
                    data = [...data].sort((a, b) => {
                        const av = (a[uidKey] ?? '').toString();
                        const bv = (b[uidKey] ?? '').toString();
                        return av.localeCompare(bv, 'pt-BR', { sensitivity: 'base' });
                    });
                }
                
                columns.forEach(col => {
                    const th = document.createElement('th');
                    th.className = 'py-3 px-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider';
                    th.textContent = col;
                    modalTableHeader.appendChild(th);
                });

                if (data.length === 0) {
                    modalTableBody.innerHTML = `<tr><td colspan="${columns.length}" class="py-4 text-center text-gray-500">Nenhum item encontrado.</td></tr>`;
                } else {
                    data.forEach(item => {
                        const row = document.createElement('tr');
                        row.className = 'hover:bg-gray-800 transition-colors';
                        
                        columns.forEach(col => {
                            const td = document.createElement('td');
                            td.className = 'py-2 px-4 text-gray-300';
                            let value = item[col.toLowerCase().replace(' ', '_')];
                            if (col.includes('Data')) {
                                value = new Date(value).toLocaleDateString('pt-BR');
                            }
                            td.textContent = value;
                            row.appendChild(td);
                        });
                        modalTableBody.appendChild(row);
                    });
                }
                modalTitle.textContent = title;
                listModal.classList.remove('hidden');
                listModal.classList.add('flex');
            };

            listDelayedBtn.addEventListener('click', () => {
                const today = new Date();
                const delayedOrders = allData.filter(item => new Date(item.orddtprev) < today);
                const columns = ['Ordem', 'Produto', 'Descrição', 'Saldo Pendente', 'Data Previsão'];
                populateModal(delayedOrders, 'Itens em Atraso', columns);
            });

            listOnTimeBtn.addEventListener('click', () => {
                const today = new Date();
                const onTimeOrders = allData.filter(item => new Date(item.orddtprev) >= today);
                const columns = ['Ordem', 'Produto', 'Descrição', 'Saldo Pendente', 'Data Previsão'];
                populateModal(onTimeOrders, 'Itens Em Dia', columns);
            });

            listUseridBtn.addEventListener('click', async () => {
                try {
                    const response = await fetch(`${API_BASE_URL}/userid/data`);
                    if (!response.ok) {
                        throw new Error('Falha ao buscar dados do UserID');
                    }
                    const useridData = await response.json();
                    
                    if (useridData.length > 0) {
                        const columns = Object.keys(useridData[0]);
                        populateModal(useridData, 'Lista de Usuários', columns);
                    } else {
                        populateModal([], 'Lista de Usuários', []);
                    }
                } catch (error) {
                    console.error("Erro ao buscar dados do UserID:", error);
                }
            });

            closeModalBtn.addEventListener('click', () => {
                listModal.classList.add('hidden');
                listModal.classList.remove('flex');
            });
            
            exportDelayedBtn.addEventListener('click', () => {
                window.location.href = `${API_BASE_URL}/corte/export?status=delayed`;
            });

            exportOnTimeBtn.addEventListener('click', () => {
                window.location.href = `${API_BASE_URL}/corte/export?status=ontime`;
            });

            fetchData();
        });
    </script>
</body>
</html>
